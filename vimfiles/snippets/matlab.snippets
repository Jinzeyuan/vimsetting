# new .m file
snippet new
    %% ---- 程序说明 ----
    %	程序作用：${1}
    %
    %	Reference: ${2:none}
    %
    %				Author: Peng Chen（XXX@XXXX.com）
    %				Date: `strftime("%Y-%m-%d")`
    %
    % make gbk encoding as the default encoding for Matlab
    % slCharacterEncoding('gbk');
    %--END
    
    warning off; clear all; close all; format long; clc;
    
    ${3}
# if end
snippet if
    if ${1}
        ${2}
    end
# if else end
snippet ife
    if ${1}
        ${2}
    else
        ${3}
    end
# for Loop
snippet for
    for idx${1} = ${2:1} : ${3:1} : ${4:N}
        ${5}
    end
# parfor Loop
snippet parfor
    parfor idx${1} = ${2:1} : ${3:1} : ${4:N}
        ${5}
    end
# while Loop
snippet while
    while ${1:1}
        ${2:2}
    end
# Function
snippet func
    %% ---- 函数说明 ----
    %	$2 函数作用：
    %	@param	$3
    %
    %	@out	$1
    %
    %	Reference: ${4:4_none}
    %
    %				Author: Peng Chen（XXX@XXXX.com）
    %				Date: `strftime("%Y-%m-%d")`
    %--END
    function ${1:1_out} = ${2:2_functionName}(${3:3_param})
    ${5:5_content}
# 子函数
snippet subfunc
    %% function (${1:functionName}): ${2: 2_describe}
    function obj = $1(obj)
        ${3}
    end
    %--END
# Function 带有默认参数
snippet funcd
    %% ---- 函数说明 ----
    %	$2 函数作用：
    %	@param	$3
    %
    %	@out	$1
    %
    %	Reference: ${4:4_none}
    %
    %				Author: Peng Chen（XXX@XXXX.com）
    %				Date: `strftime("%Y-%m-%d")`
    %--END
    function ${1:1_out} = ${2:2_functionName}(${3:3_param})
    % 默认参数设置
    switch nargin
    case 1 % 只输入一个参数时
    otherwise
    end
# 函数中的default
snippet default
    % 默认参数设置
    switch nargin
    case 1 % 只输入一个参数时
        ${1}
    otherwise
    end
# 保存到文件
snippet save
    save('${1:file}.mat', '${2:data}');
# 加载文件
snippet load
    load('${1:file}.mat');
# fprintf 函数
snippet fpf
    % 输出$1结果
    fprintf('$1%g\n', ${1:data});
# 初始化矩阵
snippet zeros
    ${1:temp} = zeros(${2:1}, ${3:1}); % 初始化 $1
# 初始化参数
snippet ip
    ${1:param} = ${2:0}; % ${3}
# 分节
snippet sec
    %% ---- ${1:section} ----
    ${2}
    %--END
# 增加一个临时小节
snippet addsec
    %% ---- 临时更改 ----
    ${1}
snippet sub
    % ${1:subsection}
# 等式
snippet eqnc
    ${1:left} = ${2:right};
# 有注释的等式
snippet eq
    ${1:left} = ${2:right}; % ${3:comm}
# 画图plot
snippet plot
    % 绘制图形
    figure('name', 'Name');
    plot(X, Y);
    title('Title');
    xlabel('Xlabel');
    ylabel('Ylabel');
snippet mesh
    % 绘制3D图形
    figure('name', '$1 3D图形');
    mesh(${2:列数}, ${3:行数}, ${1:plotParam});
    title('$1 3D图形');
    xlabel('行');
    ylabel('列');
    zlabel('$1');
# 绘制星座图
snippet scatterplot
    % 绘制 $1 星座图
    figure('name', '$1的星座图');
    scatterplot(${1:plotParam});
    title('$1的星座图');
# 画图plot
snippet semilogy
    % 绘制$1图形
    figure('name', '$1');
    semilogy(1:length($1), ${1:plotParam});
    title('$1');
    xlabel('n');
    ylabel('$1');
# 保存到文件中
snippet sf
    %% ---------------- 保存到文件“$1”中 --------------------
    dateTime = sprintf('%d年%d月%d日%d点%d分%d秒',round(clock));
    fileName = sprintf('simulate_results/${1:fileName}_%s.txt',dateTime);
    fid = fopen(fileName, 'a');
    fprintf(fid, '${2:%f}\n', ${3:value});
    fclose(fid);
    ${4}
# MATLAB 中的类
snippet class
    %% ---- 类说明 ----
    %	定义$1类
    %
    %				Author: Peng Chen（XXX@XXXX.com）
    %				Date: `strftime("%Y-%m-%d")`
    %--END
    %% ---- 类定义 ----
    classdef ${1:className}
        %% ---- 类属性定义 ----
        properties 
        end
        %--END
        %% ---- 类方法定义 ----
        methods
            
            %% function (${1}): 构造函数
            function obj = $1(Param)
                
            end
            %--END
            
        end
        %--END
    end
    %--END
# 初始化并行运算
snippet par
    % 并行运算参数设置
    coreNum = 2; % 设定机器CPU核心数量
    poolobj = gcp('nocreate');
    if isempty(poolobj)
        poolobj = parpool('local', coreNum);
    else
        if poolobj.NumWorkers ~= coreNum
            delete(poolobj);
            poolobj = parpool('local', coreNum);
        end
    end
# 产生0，1信源
snippet	source
    ${1:source} = randi([0, 1], ${2:row}, ${3:1}); % 产生均匀随机分布0，1信号
    ${4}
# switch
snippet switch
    switch ${1}
        case ${2}
            ${3}
        otherwise
            ${4}
    end
# 叠加高斯白噪声
snippet awgn
    % 噪声方差
    noiseVariance = ${1:signal}' * $1 / length($1) / db2pow(${2:SNR_dB});
    % 叠加高斯白噪声的接收信号
    ${3:recvSignal} = $1 + sqrt(noiseVariance) * randn(size($1));
# 错误
snippet err
    error('ERROR: `Filename()` ${1} 错误！');
# 是否定义了结构体中的参数
snippet isfield
    % 在结构体 $1 中是否存在参数 $2
    if isfield(${1:结构体名}, '${2:参数}')
        $3
    end
# 更改代码
snippet change
    % ------------------------------------
    ${1: Original Code}
    % ---------------------- change to ->>
    ${2: Change Code}
    % <<- end change ---------------------
# FFT变换
snippet fft
    % 对信号做FFT变换，求得频域信号
    NFFT = 2^nextpow2(length(${1:signal}));
    $1FFT = fft($1, NFFT);
    frequency = fs / 2 * linspace(0, 1, NFFT / 2 + 1);
    % 绘制图形（单边频带）
    figure('name', '单边频谱');
    plot(frequency, abs($1FFT(1 : length(frequency))));
    title('单边频谱');
    xlabel('Frequency(Hz)');
    ylabel('|Y(f)|');
# 显示程序运行时间
snippet time
    %% --------------------- 显示程序运行时间 ----------------------
    if idx == 1
        timeStart = tic;
    end
    if idx == 1
        timeStop = toc(timeStart);
        timeAll = timeStop * MAX_RUN_TIME;
        timeHour = floor(timeAll / 3600);
        timeMin = floor((timeAll - timeHour * 3600) / 60);
        timeSecond = floor(timeAll - timeHour * 3600 - timeMin * 60);
        % 输出allTime结果
        timePrint = '程序运行可能需要 ';
        if timeHour > 0
            timePrint = sprintf('%s%g小时', timePrint, timeHour);
        end
        if timeMin > 0
            timePrint = sprintf('%s%g分钟', timePrint, timeMin);
        end
        timePrint = sprintf('%s%g秒\n\n', timePrint, timeSecond);
        fprintf(timePrint);
    end
# 双坐标绘图
snippet plotyy
    % 绘制双坐标图形
    figure('name', '双坐标图形');
    [AX, H1, H2] = plotyy(X1, Y1, X2, Y2, 'plot');
    leftFigure = get(AX(1), 'Ylabel');
    set(leftFigure, 'String', 'Y1 label');
    rightFigure = get(AX(2), 'Ylabel');
    set(rightFigure, 'String', 'Y2 label');
    title('双坐标图形');
    xlabel('横坐标');
    set(AX, 'Fontsize', 20);
